file descriptors

A file descriptor is an abstraction used by processes to represent an "active" reference to a file. When a process opens a file descriptor that points to a file, the kernel marks that file as being used by the process; because the file is now currently "in use", to prevent race conditions, the kernel prevents other processes or devices from asynchronously reading or writing to the open file, or if not outright blocking access to the file, somehow handling it to avoid race conditions. The file descriptor allows the process that owns the handle to access the file (under the process' permissions, of course).

Internally, the kernel stores, among other things, within each process' PCB (process control block) a table of files, called the file descriptor table, whose entries are indexed by file descriptors. The entries of a process' file descriptor table are indexes that index into a system-wide table called the file table, maintained by the kernel. Therefore, the entries of the file table are shared across all processes; these entries record the mode with which a file was opened (i.e. reading, writing, appending, etc.) as well as a file offset pointing to a location in the file. A file descriptor is internally implemented as simply a non-negative integer that indexes a pointer to the corresponding file entry in the system-wide file table. The entries of the file table, in addition to storing file open modes and file offsets, also store pointers that index into a third table, which, like the file table, is system-wide and tracked by the kernel, called the inode table. The inode table stores as entries specific descriptions and details of general filesystem objects (eg files and directories), such as file attributes (eg time of last change to the file, file owner, access permissions, etc.), the file's location on disk (ie which disk block it's in), etc. Hence, the file table has an entry corresponding to each open() system call in the whole system, made by any process. Note that this means that there might be multiple entries corresponding to the same file, if that file was open()'d more than once (either by the same process or by multiple processes).

By default, the file descriptors 0, 1, and 2 refer to standard input, standard output, and standard error, respectively, since by default whenever a new process is created, open handles to the standard streams are automatically opened. Subsequently opened files or streams beyond the standard ones are therefore larger integers.

The totality of input and output executed by processes happens using file descriptors, in accordance with the Unix design principle that "everything is a file". When file descriptors are accessed to perform I/O on the file, a syscall is initiated with the file descriptor as an argument, and the kernel performs the necessary file modifications on behalf of the requesting program. By default, input and output occur through standard input (file descriptor 0) and standard output (file descriptor 1). There is a system call processes can execute, with the file descriptor number as argument, which will request the kernel to perform the relevant input and output to the file corresponding to the file descriptor.

It should be noted that the word "file" in Unix refers not only to specific filesystem objects such as files and directories but more generally to any object needing an I/O API, such as files, directories, network sockets, pipes, block devices, etc.