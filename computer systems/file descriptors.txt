file descriptors

A file descriptor is an abstraction used by processes to represent an "active" reference to a file. When a process opens a file descriptor that points to a file, the kernel marks that file as being used by the process; because the file is now currently "in use", to prevent race conditions, the kernel prevents other processes or devices from asynchronously reading or writing to the open file, or if not outright blocking access to the file, somehow handling it to avoid race conditions. The file descriptor allows the process that owns the handle to access the file (under the process' permissions, of course). Internally, the kernel stores, among other things, within each process' PCB (process control block) a table of files, called the file table, to which that process has an open handle, as well as the mode in which that file was opened (reading, writing, appending, etc.); a file descriptor is internally implemented as simply a non-negative integer that indexes its corresponding file in this table. File descriptors also index another table tracked by the kernel called the inode table, which stores as entries specific descriptions and details of general filesystem objects (eg files and directories), such as file attributes (eg time of last change to the file, file owner, access permissions, etc.), the file's location on disk (ie which disk block it's in), etc.

By default, the file descriptors 0, 1, and 2 refer to standard input, standard output, and standard error, respectively, since by default whenever a new process is created, open handles to the standard streams are automatically opened. Subsequently opened files or streams beyond the standard ones are therefore larger integers.

The totality of input and output executed by processes happens using file descriptors, in accordance with the Unix design principle that "everything is a file". By default, input and output occur through standard input (file descriptor 0) and standard output (file descriptor 1). There is a system call processes can execute, with the file descriptor number as argument, which will request the kernel to perform the relevant input and output to the file corresponding to the file descriptor.

It should be noted that the word "file" in Unix refers not only to specific filesystem objects such as files and directories but more generally to any object needing an I/O API, such as files, directories, network sockets, pipes, block devices, etc.